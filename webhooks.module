<?php

/**
 * @file
 * Contains webhooks.module.
 */

use Drupal\Core\Entity\Entity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\webhooks\Payload;
use Drupal\webhooks\WebhookService;
use Drupal\webhooks\Webhook;
use Drupal\Component\Uuid\Php as Uuid;

/**
 * Implements hook_help().
 */
function webhooks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webhooks module.
    case 'help.page.webhooks':
      $output = '';
      $output .= '<h3>' . t('Webhooks') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 */
function webhooks_entity_insert(EntityInterface $entity) {
  $uuid = new Uuid();
  $event = 'entity:' . $entity->getEntityType()->id() . ':create';

  $query = \Drupal::entityQuery('webhook_config')
    ->condition('active', 1)
    ->condition('events', $event, 'CONTAINS');
  $ids = $query->execute();

  /** @var \Drupal\Core\Entity\EntityStorageInterface $webhooks_storage */
  $webhooks_storage = \Drupal::entityTypeManager()->getStorage('webhook_config');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhookConfigs */
  $webhook_configs = $webhooks_storage->loadMultiple($ids);

  /** @var \Drupal\webhooks\WebhookService $webhookService */
  $webhook_service = \Drupal::service('webhooks.service');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhook_config */
  foreach ($webhook_configs as $webhook_config) {
    $webhook = new Webhook(
      [
        'Content-Type' => 'application/' . $webhook_config->getContentType(),
        'X-Drupal-Webhooks-Event' => $event,
        'X-Drupal-Webhooks-Delivery' => $uuid->generate(),
      ],
      ['entity' => $entity->toArray()]
    );

    $webhook_service->send($webhook_config, $webhook);
  }
}

/**
 * Implements hook_entity_update().
 */
function webhooks_entity_update(EntityInterface $entity) {
  $uuid = new Uuid();
  $event = 'entity:' . $entity->getEntityType()->id() . ':update';

  $query = \Drupal::entityQuery('webhook_config')
    ->condition('active', 1)
    ->condition('events', $event, 'CONTAINS');
  $ids = $query->execute();

  /** @var \Drupal\Core\Entity\EntityStorageInterface $webhooks_storage */
  $webhooks_storage = \Drupal::entityTypeManager()->getStorage('webhook_config');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhookConfigs */
  $webhook_configs = $webhooks_storage->loadMultiple($ids);

  /** @var \Drupal\webhooks\WebhookService $webhookService */
  $webhook_service = \Drupal::service('webhooks.service');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhook_config */
  foreach ($webhook_configs as $webhook_config) {
    $webhook = new Webhook(
      [
        'Content-Type' => 'application/' . $webhook_config->getContentType(),
        'X-Drupal-Webhooks-Event' => $event,
        'X-Drupal-Webhooks-Delivery' => $uuid->generate(),
      ],
      ['entity' => $entity->toArray()]
    );

    $webhook_service->send($webhook_config, $webhook);
  }
}

/**
 * Implements hook_entity_delete().
 */
function webhooks_entity_delete(EntityInterface $entity) {
  $uuid = new Uuid();
  $event = 'entity:' . $entity->getEntityType()->id() . ':delete';

  $query = \Drupal::entityQuery('webhook_config')
    ->condition('active', 1)
    ->condition('events', $event, 'CONTAINS');
  $ids = $query->execute();

  /** @var \Drupal\Core\Entity\EntityStorageInterface $webhooks_storage */
  $webhooks_storage = \Drupal::entityTypeManager()->getStorage('webhook_config');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhookConfigs */
  $webhook_configs = $webhooks_storage->loadMultiple($ids);

  /** @var \Drupal\webhooks\WebhookService $webhookService */
  $webhook_service = \Drupal::service('webhooks.service');
  /** @var \Drupal\webhooks\Entity\WebhookConfig $webhook_config */
  foreach ($webhook_configs as $webhook_config) {
    $webhook = new Webhook(
      [
        'Content-Type' => 'application/' . $webhook_config->getContentType(),
        'X-Drupal-Webhooks-Event' => $event,
        'X-Drupal-Webhooks-Delivery' => $uuid->generate(),
      ],
      ['entity' => $entity->toArray()]
    );

    $webhook_service->send($webhook_config, $webhook);
  }
}

